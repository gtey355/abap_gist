CLASS zcl_hr0043_leavereq_cr_dpc_ext DEFINITION
  PUBLIC
  INHERITING FROM zcl_hr0043_leavereq_cr_dpc
  CREATE PUBLIC .

  PUBLIC SECTION.

    CONSTANTS mc_memory_id TYPE char25 VALUE 'ZHR0043_LEAVEREQ_DPCE' ##NO_TEXT.
    CONSTANTS mc_memory_simulate_id TYPE char25 VALUE 'ZHR0043_LEAVEREQ_SIM' ##NO_TEXT.

    METHODS /iwbep/if_mgw_appl_srv_runtime~execute_action
        REDEFINITION .
  PROTECTED SECTION.

    METHODS zcalculate_available_quota
      IMPORTING
        !io_tech_request_context  TYPE REF TO /iwbep/if_mgw_req_func_import
      RETURNING
        VALUE(rs_available_quota) TYPE hcmfab_s_quota_avail .

    METHODS absencetyp_get_deep_entityset
        REDEFINITION .
    METHODS calculate_leave_duration
        REDEFINITION .
    METHODS leaverequestcoll_create_entity
        REDEFINITION .
    METHODS leaverequestcoll_get_entityset
        REDEFINITION .
    METHODS timeaccountcolle_get_entityset
        REDEFINITION .
    METHODS leaverequestcoll_delete_entity
        REDEFINITION .
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_hr0043_leavereq_cr_dpc_ext IMPLEMENTATION.


  METHOD /iwbep/if_mgw_appl_srv_runtime~execute_action.

    DATA: ls_controls  TYPE zshr_0043_controls.
    DATA: lo_exc_busi TYPE REF TO /iwbep/cx_mgw_busi_exception.
    DATA: lv_begda TYPE  e_edmdatefrom.
    DATA: lv_endda TYPE  e_edmdatefrom.
    DATA: lv_abstype TYPE awart.
    DATA: lv_time TYPE e_edmtimefrom.
    DATA: lv_convdate TYPE c LENGTH 14.
    DATA: ls_available_quota TYPE hcmfab_s_quota_avail.
    DATA: ls_leave_duration  TYPE hcmfab_s_leave_span.
    DATA: lv_value TYPE /iwbep/s_mgw_name_value_pair-name.

    TRY.
        super->/iwbep/if_mgw_appl_srv_runtime~execute_action(
          EXPORTING
            iv_action_name          = iv_action_name
            it_parameter            = it_parameter
            io_tech_request_context = io_tech_request_context
          IMPORTING
            er_data                 = er_data
        ).

        " расширение пользовательскими import function

        CASE iv_action_name.

          WHEN zcl_hr0043_utils=>mc_action1. "'ZCalculateQuotaAvailable'.
            ls_available_quota = me->zcalculate_available_quota( io_tech_request_context ).
            copy_data_to_ref( EXPORTING is_data = ls_available_quota
                                   CHANGING cr_data  = er_data ).

          WHEN zcl_hr0043_utils=>mc_action2. "'ZCalculateLeaveSpan'.
            ls_leave_duration = me->calculate_leave_duration( io_tech_request_context ).
            copy_data_to_ref( EXPORTING is_data = ls_leave_duration
                       CHANGING cr_data  = er_data ).

          WHEN zcl_hr0043_utils=>mc_action3. "'ZGetHire'.
            zcl_hr0043_utils=>read_param( EXPORTING it_param = it_parameter
                                                     iv_name =   CONV #( zcl_hr0043_utils=>mc_employp )
                                          IMPORTING ev_value = lv_value
                                        ).
            ls_controls = zcl_hr0043_utils=>get_hire( EXPORTING iv_pernr = CONV #( lv_value ) ).
            copy_data_to_ref( EXPORTING is_data = ls_controls
                    CHANGING cr_data  = er_data ).

          WHEN zcl_hr0043_utils=>mc_action4.  "'checkAbsenceFromParam'.
            zcl_hr0043_utils=>read_param( EXPORTING it_param = it_parameter
                                             iv_name =   CONV #( zcl_hr0043_utils=>mc_subtyp )
                                  IMPORTING ev_value = lv_value
                                ).
            ls_controls-zz_check_disp = zcl_hr0043_utils=>check_disp( EXPORTING iv_subty = CONV #( lv_value ) ).
            copy_data_to_ref( EXPORTING is_data = ls_controls
                                         CHANGING cr_data  = er_data ).
          WHEN zcl_hr0043_utils=>mc_action5. "'checkCE'.

            zcl_hr0043_utils=>read_param( EXPORTING it_param = it_parameter
                                                      iv_name =   CONV #( zcl_hr0043_utils=>mc_employp )
                                           IMPORTING ev_value = lv_value
                                         ).

            ls_controls = zcl_hr0043_utils=>get_ce( EXPORTING iv_pernr = CONV #( lv_value ) ).
            copy_data_to_ref( EXPORTING is_data = ls_controls
                                         CHANGING cr_data  = er_data ).

          WHEN zcl_hr0043_utils=>mc_action6. "'checkSud'.
            zcl_hr0043_utils=>read_param( EXPORTING it_param = it_parameter
                                                iv_name =   CONV #( zcl_hr0043_utils=>mc_employp )
                                     IMPORTING ev_value = lv_value
                                   ).
            ls_controls = zcl_hr0043_utils=>check_sud( EXPORTING iv_pernr = CONV #( lv_value ) ).
            copy_data_to_ref( EXPORTING is_data = ls_controls
                                         CHANGING cr_data  = er_data ).

          WHEN zcl_hr0043_utils=>mc_action7. "'checkFirstSign'.
            zcl_hr0043_utils=>read_param( EXPORTING it_param = it_parameter
                                                iv_name =   CONV #( zcl_hr0043_utils=>mc_employp )
                                     IMPORTING ev_value = lv_value
                                   ).
            ls_controls = zcl_hr0043_utils=>get_xss_sign( EXPORTING iv_pernr = CONV #( lv_value ) ).
            copy_data_to_ref( EXPORTING is_data = ls_controls
                                         CHANGING cr_data  = er_data ).
          WHEN zcl_hr0043_utils=>mc_action8.  "'setFirstXssSign'.
            zcl_hr0043_utils=>read_param( EXPORTING it_param = it_parameter
                                                iv_name =   CONV #( zcl_hr0043_utils=>mc_employp )
                                     IMPORTING ev_value = lv_value
                                   ).

            ls_controls = zcl_hr0043_utils=>set_xss_sign( EXPORTING iv_pernr = CONV #( lv_value ) ).
            IF ls_controls IS NOT INITIAL. " operation insert has errors
              copy_data_to_ref( EXPORTING is_data = ls_controls
                                CHANGING cr_data  = er_data ).
            ENDIF.

        ENDCASE.


      CATCH /iwbep/cx_mgw_busi_exception.
      CATCH /iwbep/cx_mgw_tech_exception.
    ENDTRY.
  ENDMETHOD.


  METHOD absencetyp_get_deep_entityset.
    DATA: lv_text TYPE zz_absn.
    FIELD-SYMBOLS: <lt_entityset> TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <ls_entityset> TYPE any.

    TRY.
        super->absencetyp_get_deep_entityset(
          EXPORTING
            iv_entity_name           = iv_entity_name
            iv_entity_set_name       = iv_entity_set_name
            iv_source_name           = iv_source_name
            it_filter_select_options = it_filter_select_options
            is_paging                = is_paging
            it_key_tab               = it_key_tab
            it_navigation_path       = it_navigation_path
            it_order                 = it_order
            iv_filter_string         = iv_filter_string
            io_expand                = io_expand
            iv_search_string         = iv_search_string
            io_tech_request_context  = io_tech_request_context
          IMPORTING
            er_entityset             = er_entityset
            es_response_context      = es_response_context
            et_expanded_clauses      = et_expanded_clauses
            et_expanded_tech_clauses = et_expanded_tech_clauses
       ).



        ASSIGN er_entityset->* TO <lt_entityset>.


        LOOP AT <lt_entityset> ASSIGNING FIELD-SYMBOL(<ls_line>).

          " заполняем новые длинные тексты abs
          ASSIGN COMPONENT 'att_abs_type' OF STRUCTURE <ls_line> TO FIELD-SYMBOL(<lv_att_abs_type>).
          IF  sy-subrc NE 0.
            RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception.
          ENDIF.

          ASSIGN COMPONENT 'ZZ_ABSN_LTEXT' OF STRUCTURE <ls_line> TO FIELD-SYMBOL(<lv_zz_absn_ltext>).
          IF  sy-subrc NE 0.
            RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception.
          ENDIF.

          CLEAR lv_text.
          zcl_hr0043_utils=>get_abs_long_text(
             EXPORTING
               iv_absence    = <lv_att_abs_type>
             IMPORTING
               ev_text = lv_text
          ).
          <lv_zz_absn_ltext> = lv_text.


        ENDLOOP.

      CATCH /iwbep/cx_mgw_busi_exception.
      CATCH /iwbep/cx_mgw_tech_exception.
    ENDTRY.
  ENDMETHOD.


  METHOD leaverequestcoll_create_entity.

    DATA: lt_messages TYPE bapirettab.
    DATA: lt_saved_messages TYPE /iwbep/t_message_container.
    DATA: ls_changed_msg TYPE /iwbep/s_message_container.
    DATA: ls_ui_leave_request  TYPE cl_hcmfab_leave_reques_mpc=>ts_leaverequest.
    DATA: lo_exc_busi TYPE REF TO /iwbep/cx_mgw_busi_exception.
    DATA: lo_exc_tech TYPE REF TO /iwbep/cx_mgw_tech_exception.
    DATA: lv_conflicted_absence TYPE zz_type.
    DATA: lv_pa TYPE zz_type.
    DATA: lv_pa_text TYPE zz_absn.
    DATA: lv_abs_text TYPE zz_absn.
    DATA: lv_conv_begda TYPE string.
    DATA: lv_conv_endda TYPE string.
    DATA: ls_sign TYPE zthr_0043_sign.
    DATA: lv_diff2006 TYPE ptm_quonum.
    DATA: lv_etag TYPE ptm_quonum.
    DATA: lv_plan TYPE ptm_quonum.
    DATA: lv_rest_adv_days TYPE ptm_quonum.
    DATA: lv_check_cond TYPE boolean_01.
    DATA lv_numd  TYPE int1.
    DATA lv_dummy TYPE c.
    DATA: lv_plan_text TYPE string.
    DATA: lv_ktart TYPE ktart.

    DATA(lv_sub2006) = zcl_hr0043_utils=>mv_sub2006.
    DATA(lv_abex) = zcl_hr0043_utils=>mv_abex.
    DATA(lv_abcn) = zcl_hr0043_utils=>mv_abcn.
    DATA(lv_excs) = zcl_hr0043_utils=>mv_excs.
    DATA(lo_message_container) = me->mo_context->get_message_container( ).



    TRY.
* ----------- выполняем пользовательские доп проверки
        io_data_provider->read_entry_data( IMPORTING es_data = ls_ui_leave_request ).
**"< 22.09.21 EzhovDA отключаем проверки дат для ZZ_REPEAT = ABAP_TRUE
        zcl_hr0043_utils=>set_memory_for_check( ls_ui_leave_request-zz_repeat ).

**"/> 22.09.21 EzhovDA

** ---блок пользовательских проверок
* выполняются только если заявка регистрируется первый раз
        IF ls_ui_leave_request-zz_repeat EQ abap_false.

*-------- проверка ТН на диспансеризацию 2006
          IF  ls_ui_leave_request-absence_type EQ lv_sub2006.
            DATA(lv_disp) = zcl_hr0043_utils=>get_disp(
            EXPORTING
              iv_pernr = ls_ui_leave_request-employee_number
              iv_subty = ls_ui_leave_request-absence_type
              iv_begda = ls_ui_leave_request-begda
            ).

            IF  lv_disp EQ abap_true.
              MESSAGE ID 'ZHR0043_MSG' TYPE 'E' NUMBER 002 INTO lv_plan_text.
              lt_messages = VALUE #( type = sy-msgty id = sy-msgid number = sy-msgno  ( ) ).
              lo_message_container->add_messages_from_bapi(
                    it_bapi_messages         = lt_messages
                    iv_determine_leading_msg = /iwbep/if_message_container=>gcs_leading_msg_search_option-last
                    iv_add_to_response_header = abap_true
                    iv_entity_type           = iv_entity_name
                    ).
            ENDIF.
          ENDIF.

*----- проверка  8 - на пересечение с плановым отпуском Р000
          DATA(lv_crossplan) =  zcl_hr0043_utils=>check_crossplan(
                                 EXPORTING
                                   iv_pernr = ls_ui_leave_request-employee_number
                                   iv_begda = ls_ui_leave_request-begda
                                   iv_endda = ls_ui_leave_request-endda
          ).

          IF lv_crossplan EQ abap_true.
            MESSAGE ID 'ZHR0043_MSG' TYPE 'E' NUMBER 004 INTO lv_plan_text.
            lt_messages = VALUE #( type = sy-msgty id = sy-msgid number = sy-msgno  ( ) ).

            lo_message_container->add_messages_from_bapi(
                  it_bapi_messages         = lt_messages
                  iv_determine_leading_msg = /iwbep/if_message_container=>gcs_leading_msg_search_option-last
                  iv_add_to_response_header = abap_true
                  iv_entity_type           = iv_entity_name
                  ).

          ENDIF.
*-----        { HR0045
          IF zcl_hr0045_matrix_abs=>check_deadline_request(
            EXPORTING
               iv_pernr         = ls_ui_leave_request-employee_number
               iv_absence_type  = ls_ui_leave_request-absence_type
               iv_request_begda = ls_ui_leave_request-begda
            IMPORTING
              ev_numd = lv_numd
             ) = abap_false.

            IF 1 = 2.
              MESSAGE e008(zhr0045) WITH lv_numd.
            ENDIF.
            MESSAGE ID 'ZHR0045' TYPE 'E' NUMBER 008 INTO lv_plan_text WITH lv_numd.
            lt_messages = VALUE #( type = sy-msgty id = sy-msgid number = sy-msgno message_v1 = lv_numd  ( ) ).
            lo_message_container->add_messages_from_bapi(
                  it_bapi_messages         = lt_messages
                  iv_determine_leading_msg = /iwbep/if_message_container=>gcs_leading_msg_search_option-last
                  iv_add_to_response_header = abap_true
                  iv_entity_type           = iv_entity_name
                  ).
          ENDIF.
*        } HR0045

* -------- проверка что берет аванс из скрытых 7 дней
          zcl_hr0043_utils=>get_ktart_by_abs(
                 EXPORTING iv_abscode = ls_ui_leave_request-absence_type
                 IMPORTING ev_ktart = lv_ktart
          ).

          IF lv_ktart EQ '01'.
            DATA(lv_check_take_hiddenadvance) =  zcl_hr0043_utils=>check_take_hidden_advance(
                                  EXPORTING
                                    iv_pernr = ls_ui_leave_request-employee_number
                                    iv_begda = ls_ui_leave_request-begda
                                    iv_endda = ls_ui_leave_request-endda
                                    iv_ktart = lv_ktart
                                  IMPORTING
                                    ev_rest_adv_days = lv_rest_adv_days "остаток флаг1
             ).

            IF ( lv_check_take_hiddenadvance EQ 'A' OR lv_check_take_hiddenadvance EQ 'G' )
               AND  NOT line_exists( lt_messages[ 1 ] ).
              TRY.
                  " перед выдачей предупреждения об авансе моделируем запрос
                  IF ls_ui_leave_request-zz_repeat EQ abap_false. " первичный запрос всегда моделируем
                    zcl_hr0043_utils=>set_memory_for_sumulate_lrq( abap_true ).
                  ELSE. " second request
                    zcl_hr0043_utils=>set_memory_for_sumulate_lrq( abap_false ).
                  ENDIF.

                  super->leaverequestcoll_create_entity(
                       EXPORTING
                         iv_entity_name          = iv_entity_name
                         iv_entity_set_name      = iv_entity_set_name
                         iv_source_name          = iv_source_name
                         it_key_tab              = it_key_tab
                         io_tech_request_context = io_tech_request_context
                         it_navigation_path      = it_navigation_path
                         io_data_provider        = io_data_provider
                       IMPORTING
                         er_entity               = er_entity
                  ).

                CATCH /iwbep/cx_mgw_busi_exception INTO lo_exc_busi.
                  MESSAGE ID 'ZHR0043_MSG' TYPE 'E' NUMBER 006 INTO lv_plan_text.
                  lt_messages = VALUE #( type = sy-msgty id = sy-msgid number = sy-msgno message_v1 = lv_numd  ( ) ).
                  lo_message_container->add_messages_from_bapi(
                        it_bapi_messages         = lt_messages
                        iv_determine_leading_msg = /iwbep/if_message_container=>gcs_leading_msg_search_option-last
                        iv_add_to_response_header = abap_true
                        iv_entity_type           = iv_entity_name
                  ).
                  RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
                    EXPORTING
                      message_container = lo_message_container.
              ENDTRY.

            ELSEIF lv_check_take_hiddenadvance EQ 'E'.
              MESSAGE ID 'ZHR0043_MSG' TYPE 'E' NUMBER 000 INTO lv_plan_text.
              lt_messages = VALUE #( type = sy-msgty id = sy-msgid number = sy-msgno message_v1 = lv_numd  ( ) ).
              lo_message_container->add_messages_from_bapi(
                    it_bapi_messages         = lt_messages
                    iv_determine_leading_msg = /iwbep/if_message_container=>gcs_leading_msg_search_option-last
                    iv_add_to_response_header = abap_true
                    iv_entity_type           = iv_entity_name
                    ).
            ENDIF. "
          ENDIF. " 01
        ENDIF. " ls_ui_leave_request-zz_repeat EQ abap_false.

        " выбрасываем ошибку после пользовательских проверок
        IF line_exists( lt_messages[ type = 'E' ] ).
          RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
            EXPORTING
              message_container = lo_message_container.
        ENDIF.

****** - выполняем стандартные проверки если пользовательские прошли без ошибок

** --- 1 - моделируем запрос - тестим есть ли в нем ошибки
        IF ls_ui_leave_request-zz_repeat EQ abap_false. " первичный запрос всегда моделируем
          zcl_hr0043_utils=>set_memory_for_sumulate_lrq( abap_true ).
        ELSE. " second request
          zcl_hr0043_utils=>set_memory_for_sumulate_lrq( abap_false ).
        ENDIF.

        super->leaverequestcoll_create_entity(
          EXPORTING
            iv_entity_name          = iv_entity_name
            iv_entity_set_name      = iv_entity_set_name
            iv_source_name          = iv_source_name
            it_key_tab              = it_key_tab
            io_tech_request_context = io_tech_request_context
            it_navigation_path      = it_navigation_path
            io_data_provider        = io_data_provider
          IMPORTING
            er_entity               = er_entity
        ).

** ------ заменяем стандартные сообщения которые приехали из super
      CATCH /iwbep/cx_mgw_busi_exception INTO lo_exc_busi.

        lo_message_container = lo_exc_busi->get_msg_container( ).
        "save original messages
        lt_saved_messages =  lo_message_container->get_messages( ). "#EC CI_CONV_OK there is a standard call


        " ------ 3 check
        TRY.
            CLEAR ls_changed_msg.
            ls_changed_msg =
            lt_saved_messages[ number = '124' id = 'HRTIM_ABS_REQ' type = 'E' ]. "#EC CI_STDSEQ определено в стандарте
                                 "#EC CI_CONV_OK определено в стандарте
          CATCH cx_root.
        ENDTRY.
        IF  ls_changed_msg IS NOT INITIAL.

          zcl_hr0043_utils=>parse_124message(
          EXPORTING
            ir_changed_msg = ls_changed_msg
          IMPORTING
            ev_conflicted_absence =  lv_conflicted_absence
            ev_pa                 =  lv_pa
          ).

          "get long texts
          zcl_hr0043_utils=>get_pa_text(
          EXPORTING
            iv_pa = lv_pa
          IMPORTING
            ev_text = lv_pa_text
          ).

          zcl_hr0043_utils=>get_abs_long_text(
             EXPORTING
               iv_absence    = lv_conflicted_absence
             IMPORTING
               ev_text = lv_abs_text
          ).


          ls_changed_msg-message_v1 = |{ lv_pa_text } / { lv_abs_text }|. "#EC CI_CONV_OK требования бизнеса

          MESSAGE ID 'ZHR0043_MSG' TYPE 'E' NUMBER 001 INTO lv_plan_text.
          zcl_hr0043_utils=>change_standard_message(
          EXPORTING
            iv_entity_name          = iv_entity_name
            is_changed_message      = ls_changed_msg
            iv_new_id               = sy-msgid
            iv_new_number           = sy-msgno
            CHANGING
               co_message_container =  lo_message_container
         ).
        ENDIF.

        " ------ 7 check
        TRY.
            CLEAR ls_changed_msg.
            ls_changed_msg =
            lt_saved_messages[ number = '136' id = 'HRTIM_ABS_REQ'
            type = 'E' ].        "#EC CI_STDSEQ  определено в стандарте
                                 "#EC CI_CONV_OK определено в стандарте
          CATCH cx_root.
        ENDTRY.
        IF  ls_changed_msg IS NOT INITIAL.
          MESSAGE ID 'ZHR0043_MSG' TYPE 'E' NUMBER 003 INTO lv_plan_text.
          zcl_hr0043_utils=>change_standard_message(
          EXPORTING
            iv_entity_name          = iv_entity_name
            is_changed_message      = ls_changed_msg
            iv_new_id               = sy-msgid
            iv_new_number           = sy-msgno
            CHANGING
               co_message_container =  lo_message_container
         ).
        ENDIF.

* выкидываем сообщение дальше
        RAISE EXCEPTION lo_exc_busi.

      CATCH /iwbep/cx_mgw_tech_exception INTO lo_exc_tech.
        RAISE EXCEPTION lo_exc_tech.
    ENDTRY.


    " digital sign is being created

    ls_sign-guid = er_entity-request_id.
    ls_sign-zz_type = '1'.
    ls_sign-pernr = er_entity-employee_number.
    ls_sign-subty = er_entity-absence_type.
    ls_sign-begda = er_entity-begda.
    ls_sign-endda = er_entity-endda.
    ls_sign-zz_date = sy-datum.
    ls_sign-zz_time = sy-uzeit.

    SELECT * FROM pa0001 INTO TABLE @DATA(lt_pa0001)
      WHERE pernr = @ls_sign-pernr AND
      begda LE @sy-datum AND endda GE @sy-datum.

    IF line_exists( lt_pa0001[ 1 ] ).
      ls_sign-orgeh =   lt_pa0001[ 1 ]-orgeh.
      ls_sign-plans =   lt_pa0001[ 1 ]-plans.
    ENDIF.

    INSERT zthr_0043_sign FROM ls_sign.
    IF sy-subrc NE 0.
      RAISE EXCEPTION lo_exc_tech.
    ENDIF.
  ENDMETHOD.


  METHOD leaverequestcoll_get_entityset.

    DATA: lv_text TYPE zz_absn.
    DATA: lo_hcm_attabs_request_api TYPE REF TO cl_hcmfab_attabs_request_apis.
    DATA: lo_filter                TYPE  REF TO /iwbep/if_mgw_req_filter,
          lt_filter_select_options TYPE /iwbep/t_mgw_select_option,
          lv_filter_str            TYPE string,
          lt_messages              TYPE bapirettab,
          lt_leave_req_detail      TYPE hcmfab_t_lrq_request_detail,
          lt_calendar_data         TYPE hcmfab_t_lrq_calendar_data,
          lv_startdate             TYPE dats,
          lv_pernr                 TYPE p_pernr.

    TRY.
        super->leaverequestcoll_get_entityset(
          EXPORTING
            iv_entity_name           = iv_entity_name
            iv_entity_set_name       = iv_entity_set_name
            iv_source_name           = iv_source_name
            it_filter_select_options = it_filter_select_options
            is_paging                = is_paging
            it_key_tab               = it_key_tab
            it_navigation_path       = it_navigation_path
            it_order                 = it_order
            iv_filter_string         = iv_filter_string
            iv_search_string         = iv_search_string
            io_tech_request_context  = io_tech_request_context
          IMPORTING
            et_entityset             = et_entityset
            es_response_context      = es_response_context
         ).

        lo_filter = io_tech_request_context->get_filter( ).
        lt_filter_select_options = lo_filter->get_filter_select_options( ).
        lv_filter_str = lo_filter->get_filter_string( ).
        LOOP AT lt_filter_select_options INTO DATA(ls_filter).
          LOOP AT ls_filter-select_options INTO DATA(ls_filter_range).
            CASE ls_filter-property.
              WHEN 'BEGDA'.
                lv_startdate = ls_filter_range-low.
              WHEN 'EMPLOYEE_NUMBER'.
                lv_pernr     = ls_filter_range-low.
            ENDCASE.
          ENDLOOP.
        ENDLOOP.

        cl_hcmfab_attabs_request_apis=>get_instance(
          RECEIVING
              ro_request_api = lo_hcm_attabs_request_api
        ).

        lo_hcm_attabs_request_api->read_emp_request_list(
               EXPORTING
                 iv_pernr         = lv_pernr
                 iv_as_of_date    = lv_startdate
                 iv_modus         = 'R'
                 "iv_count_only    = io_tech_request_context->has_count( )
               IMPORTING
                 et_messages      = lt_messages
                 et_requests      = lt_leave_req_detail
                 et_calendar_data = lt_calendar_data
         ).

        " схлопываем записи
        SORT et_entityset BY
        employee_number ASCENDING absence_type ASCENDING begda ASCENDING endda ASCENDING
        version_no DESCENDING.
        DELETE ADJACENT DUPLICATES FROM  et_entityset COMPARING  employee_number absence_type begda endda.


        LOOP AT et_entityset ASSIGNING FIELD-SYMBOL(<ls_wa>). "#EC CI_CONV_OK определено в стандарте
          " заполняем новые длиннные тексты abs
          CLEAR lv_text.
          zcl_hr0043_utils=>get_abs_long_text(
             EXPORTING
               iv_absence    = <ls_wa>-absence_type
             IMPORTING
               ev_text = <ls_wa>-zz_absn_ltext
          ).

          zcl_hr0043_utils=>set_lrq_deletable(
              EXPORTING
                iv_requestid = <ls_wa>-request_id
                it_req_detail = lt_leave_req_detail
              IMPORTING
                ev_deletable = <ls_wa>-action_delete
          ).

          zcl_hr0043_utils=>set_lrq_editable(
             EXPORTING
               iv_requestid = <ls_wa>-request_id
               it_req_detail = lt_leave_req_detail
             CHANGING
               cv_editable = <ls_wa>-action_modify
         ).

        ENDLOOP.

      CATCH /iwbep/cx_mgw_busi_exception.
      CATCH /iwbep/cx_mgw_tech_exception.
    ENDTRY.
  ENDMETHOD.


  METHOD timeaccountcolle_get_entityset.

    DATA: lv_pernr TYPE pernr_d.
    DATA: lt_pernr TYPE pernr_tab.
    DATA: lt_limit TYPE RANGE OF subty.
    DATA: ls_filter LIKE LINE OF it_filter_select_options.
    DATA: lv_startdate TYPE begda.
    DATA: lv_plan TYPE zz_plan.
    DATA: lv_current_year TYPE sy-datum VALUE '99999999'.
    DATA(lr_allowed_types) =  zcl_hr0043_param=>mr_allowed_ktart.

    TRY.
        super->timeaccountcolle_get_entityset(
          EXPORTING
            iv_entity_name           = iv_entity_name
            iv_entity_set_name       = iv_entity_set_name
            iv_source_name           = iv_source_name
            it_filter_select_options = it_filter_select_options
            is_paging                = is_paging
            it_key_tab               = it_key_tab
            it_navigation_path       = it_navigation_path
            it_order                 = it_order
            iv_filter_string         = iv_filter_string
            iv_search_string         = iv_search_string
            io_tech_request_context  = io_tech_request_context
          IMPORTING
            et_entityset             = et_entityset
            es_response_context      = es_response_context
         ).
        " удаляем технические типы
        DELETE et_entityset WHERE  time_type NOT IN lr_allowed_types.

        " ----- схлопываем записи
        SORT et_entityset BY pernr ASCENDING qtype ASCENDING filter_begda ASCENDING time_type ASCENDING.
        DELETE ADJACENT DUPLICATES FROM  et_entityset COMPARING pernr qtype filter_begda time_type.


        " ---------- вызываем внешний расчет
        " получаем тн и дату
        READ TABLE it_filter_select_options INTO ls_filter
            WITH KEY property = 'EmployeeID'. "#EC CI_STDSEQ определено в стандарте
        IF sy-subrc EQ 0.
          lv_pernr = ls_filter-select_options[ 1 ]-low.
          APPEND lv_pernr TO lt_pernr.
        ENDIF.

        READ TABLE it_filter_select_options INTO ls_filter
            WITH KEY property = 'FilterStartDate'. "#EC CI_STDSEQ определено в стандарте
        IF sy-subrc EQ 0.
          IF line_exists( ls_filter-select_options[ 1 ] ).
            lv_startdate = ls_filter-select_options[ 1 ]-low.
          ENDIF.
        ENDIF.
        " получаем лимиты
        lt_limit = VALUE #(
         FOR ls_entityset IN et_entityset
           ( sign = zcl_ranges=>mc_sign-i option = zcl_ranges=>mc_option-eq low = ls_entityset-time_type )
        ).


        cl_salv_bs_runtime_info=>set(
               display        = abap_false
               metadata       = abap_false
               data           = abap_true
        ).

        CALL FUNCTION 'HR_READ_INFOTYPE_AUTHC_DISABLE'.

        DATA(lo_balance) = NEW zcl_hr0135_leave_balance(
              iv_date  = lv_startdate
              it_pernr = lt_pernr
              ir_limit = lt_limit
        ).

        DATA(lt_pernr_res) = lo_balance->get_leave_balance(
            iv_future               = abap_false"p_future
        ).

        cl_salv_bs_runtime_info=>clear_all( ).


        " ----------- заполняем entity set
        LOOP AT et_entityset ASSIGNING FIELD-SYMBOL(<ls_entityset>).
          " get long text
          zcl_hr0043_utils=>get_limit_long_text(
             EXPORTING
               iv_subty    = <ls_entityset>-time_type
             IMPORTING
               ev_text = <ls_entityset>-zz_limn_ltext
          ).

          " get avail
          IF line_exists( lt_pernr_res[ ktart =  <ls_entityset>-time_type ] ).
            <ls_entityset>-zz_avail = lt_pernr_res[ ktart =  <ls_entityset>-time_type ]-accumulated -
                lt_pernr_res[ ktart =  <ls_entityset>-time_type ]-used.
            IF <ls_entityset>-zz_avail < 0.
              <ls_entityset>-zz_avail = 0. "<ls_entityset>-zz_avail * -1.
            ENDIF.
          ENDIF.


        ENDLOOP.

*-----  a plan is got once and append to the output structure as a row

        "  сумма Р000 из 2001
        zcl_hr0043_utils=>get_p000_2001(
            EXPORTING iv_pernr = lv_pernr
                       iv_currentyear = abap_true
            IMPORTING ev_p000_days  = lv_plan
        ).

        MESSAGE ID 'ZHR0043_MSG' TYPE 'I' NUMBER 007 INTO DATA(lv_plan_text).
        APPEND VALUE #( pernr = lv_pernr time_type = 99
        zz_limn_ltext = lv_plan_text time_unit = '010' zz_avail = lv_plan ) TO et_entityset.


      CATCH /iwbep/cx_mgw_busi_exception.
      CATCH /iwbep/cx_mgw_tech_exception.
    ENDTRY.
  ENDMETHOD.


  METHOD zcalculate_available_quota.

    DATA: lt_parameters         TYPE SORTED TABLE OF /iwbep/s_mgw_name_value_pair  WITH UNIQUE KEY name,
          lv_attabs_ind         TYPE c,
          lv_pernr              TYPE pernr_d,
          lv_infotype           TYPE string,
          lv_subty              TYPE subty,
          lv_ktart              TYPE ktart,
          ls_key                LIKE LINE OF lt_parameters,
          lt_time_accounts      TYPE hcmfab_t_lrq_quota_status,
          ls_time_account       LIKE LINE OF lt_time_accounts,
          ls_time_account_help  LIKE LINE OF lt_time_accounts,
          lo_hcm_att_abs_bl_api TYPE REF TO cl_hcmfab_att_abs_bl_apis,
          lv_sum_flag1          TYPE ptm_quonum VALUE 0,
          lv_bal_quota          TYPE ptm_quonum.            "RAG2557290
    DATA: lv_diff2006_days TYPE ptm_quonum VALUE 0.
    DATA: lv_p000_days TYPE ptm_quonum VALUE 0.
    DATA: lv_avail_days TYPE ptm_quonum VALUE 0.
    DATA: lv_reserved_days TYPE ptm_quonum VALUE 0.

    CLEAR rs_available_quota.

    lt_parameters = io_tech_request_context->get_parameters( ).

    READ TABLE lt_parameters INTO ls_key WITH TABLE KEY name = 'EMPLOYEEID'.
    IF sy-subrc EQ 0.
      lv_pernr = ls_key-value.
    ENDIF.

    READ TABLE lt_parameters INTO ls_key WITH KEY name = 'INFOTYPE'.
    IF sy-subrc EQ 0.
      lv_infotype = ls_key-value.
    ENDIF.

    READ TABLE lt_parameters INTO ls_key WITH KEY name = 'ABSENCETYPECODE'.
    IF sy-subrc EQ 0.
      lv_subty = ls_key-value.
    ENDIF.

    " get reserved requests
    zcl_hr0043_utils=>get_reserved_req(
        EXPORTING
        iv_pernr = lv_pernr
        iv_subty = lv_subty
        IMPORTING
        ev_reserved_days = lv_reserved_days
    ).

    " get ktart for 01/05/07
    zcl_hr0043_utils=>get_ktart_by_abs(
        EXPORTING iv_abscode = lv_subty
        IMPORTING ev_ktart = lv_ktart
    ).

    " сумма diff из 2006 - округленная без мантиссы
    zcl_hr0043_utils=>get_diff_2006(
        EXPORTING iv_pernr = lv_pernr
                  iv_ktart = lv_ktart
        IMPORTING ev_diff2006_days  = lv_diff2006_days
    ).

    IF lv_ktart EQ '01'.
      "  сумма Р000 из 2001
      zcl_hr0043_utils=>get_p000_2001(
          EXPORTING iv_pernr = lv_pernr
          IMPORTING ev_p000_days  = lv_p000_days
      ).
      lv_avail_days = lv_diff2006_days - lv_p000_days - lv_reserved_days.

      " определяем есть ли лимиты будущих периодов
      DATA(lv_is_limits) = zcl_hr0043_utils=>check_future_limit_exists(
          EXPORTING
              iv_pernr = lv_pernr
              iv_ktart = '01'
          IMPORTING
              ev_sum_flag1 = lv_sum_flag1
      ).
      " если есть ЛБП выводим флаг1
      IF lv_is_limits EQ abap_true.
        lv_avail_days = lv_sum_flag1.
      ENDIF.
    ELSE.
      lv_avail_days = lv_diff2006_days - lv_reserved_days.
    ENDIF. " ktart = 01

* Begin of Note 2680898
    IF lv_bal_quota EQ 1 AND ls_time_account-time_unit IS NOT INITIAL AND ls_time_account-time_unit NE '99'. "LAK2794663
      IF ls_time_account-time_unit EQ 001.
        ls_time_account-time_unit_text = TEXT-001 ##TEXT_POOL.  "код из стандарта
      ELSEIF ls_time_account-time_unit EQ 010.
        ls_time_account-time_unit_text = TEXT-010 ##TEXT_POOL.  "код из стандарта
      ENDIF.
    ENDIF.
* End of Note 2680898

    rs_available_quota-time_type_text                = ls_time_account-time_type_text.
    rs_available_quota-time_unit_text                = ls_time_account-time_unit_text.
    rs_available_quota-balance_quantity_rest_posted  = ls_time_account-balance_quantity_rest_posted.
    rs_available_quota-balance_rest_posted_requested =  lv_avail_days. " zhr043 "lv_bal_quota. "RAG2557290

  ENDMETHOD.


  METHOD calculate_leave_duration.
    DATA: lt_parameters    TYPE SORTED TABLE OF /iwbep/s_mgw_name_value_pair  WITH UNIQUE KEY name,
          ls_key           LIKE LINE OF lt_parameters,
          lv_pernr         TYPE pernr_d,
          lv_begda         TYPE begda,
          lv_endda         TYPE endda,
          lv_abscode       TYPE subty,
          lv_ktart         TYPE ktart,
          lv_rest_adv_days TYPE ptm_quonum VALUE 0,
          lv_avail_days    TYPE ptm_quonum VALUE 0,
          lv_used_days     TYPE ptm_quonum VALUE 0.
    DATA: lt_p2001 TYPE STANDARD TABLE OF p2001.
    DATA: lt_p2001_filter TYPE SORTED TABLE OF p2001 WITH NON-UNIQUE KEY subty begda endda.
    DATA: lv_e_tage TYPE ptm_quonum.
    DATA: lv_flag1 TYPE ptm_quonum.
    DATA: lv_diff2006_days TYPE ptm_quonum VALUE 0.
    DATA: lv_p000_days TYPE ptm_quonum VALUE 0.
    DATA: lv_avail_estim_days TYPE ptm_quonum VALUE 0.
    DATA: lv_reserved_days TYPE ptm_quonum VALUE 0.


    DATA(lv_flag7days) = zcl_hr0130_param=>mv_flag. " 7 days

    lt_parameters = io_tech_request_context->get_parameters( ).

    READ TABLE lt_parameters INTO ls_key WITH TABLE KEY name = 'EMPLOYEEID'.
    IF sy-subrc EQ 0.
      lv_pernr = ls_key-value.
    ENDIF.

    READ TABLE lt_parameters INTO ls_key WITH TABLE KEY name = 'ABSENCETYPECODE'.
    IF sy-subrc EQ 0.
      lv_abscode = ls_key-value.
    ENDIF.

    READ TABLE lt_parameters INTO ls_key WITH KEY name = 'STARTDATE'.
    IF sy-subrc EQ 0.
      lv_begda = ls_key-value.
    ENDIF.

    READ TABLE lt_parameters INTO ls_key WITH KEY name = 'ENDDATE'.
    IF sy-subrc EQ 0.
      lv_endda = ls_key-value.
    ENDIF.

    " get ktart
    zcl_hr0043_utils=>get_ktart_by_abs(
        EXPORTING iv_abscode = lv_abscode
        IMPORTING ev_ktart = lv_ktart
    ).

    " сумма всех diff из 2006 - округленная без мантиссы

    zcl_hr0043_utils=>get_diff_2006(
        EXPORTING iv_pernr = lv_pernr
                  iv_ktart = lv_ktart
        IMPORTING ev_diff2006_days  = lv_diff2006_days
    ).
    "  сумма Р000 из 2001
    zcl_hr0043_utils=>get_p000_2001(
        EXPORTING iv_pernr = lv_pernr
        IMPORTING ev_p000_days  = lv_p000_days
    ).

    " get reserved requests
    zcl_hr0043_utils=>get_reserved_req(
        EXPORTING
        iv_pernr = lv_pernr
        iv_subty = lv_abscode
        IMPORTING
        ev_reserved_days = lv_reserved_days
    ).

    zcl_hr0043_utils=>get_days_from_dates(
           EXPORTING iv_pernr = lv_pernr
           iv_begda = lv_begda
           iv_endda = lv_endda
           IMPORTING ev_days = lv_e_tage
        ).


    " --- check limit для 01 только
    IF lv_ktart EQ '01'.

      lv_avail_days = lv_diff2006_days - lv_p000_days - lv_reserved_days.


      DATA(lv_check_take_hiddenadvance) =  zcl_hr0043_utils=>check_take_hidden_advance(
                                    EXPORTING
                                      iv_pernr = lv_pernr
                                      iv_begda = lv_begda
                                      iv_endda = lv_endda
                                      iv_ktart = lv_ktart
                                    IMPORTING
                                      ev_rest_adv_days = lv_rest_adv_days
      ).
      IF lv_check_take_hiddenadvance IS INITIAL. " укладываемся в сущ диапазон значений,
        rs_leave_duration-abrtg = lv_e_tage.
        rs_leave_duration-time_unit_text = 'Дни'.
        lv_avail_estim_days = lv_avail_days.

      ELSEIF lv_check_take_hiddenadvance EQ 'G'. "лимита еще нет
        IF lv_e_tage <= ( lv_avail_days + lv_flag7days ).
          rs_leave_duration-abrtg = lv_e_tage.
          rs_leave_duration-time_unit_text = 'Дни'.
          lv_avail_estim_days = lv_avail_days + lv_flag7days.
        ELSE.
          rs_leave_duration-abrtg = 0.
          rs_leave_duration-time_unit_text = ''.
        ENDIF.

      ELSEIF lv_check_take_hiddenadvance EQ 'A'."лимит есть,
        rs_leave_duration-abrtg = lv_e_tage.
        rs_leave_duration-time_unit_text = 'Дни'.
        lv_avail_estim_days = lv_rest_adv_days.

      ELSE. " E ошибка
        rs_leave_duration-abrtg = 0.
        rs_leave_duration-time_unit_text = ''.
        RETURN.
      ENDIF.
    ELSEIF lv_ktart EQ '00'. " для 1006 и 2006
      rs_leave_duration-abrtg = lv_e_tage.
      rs_leave_duration-time_unit_text = 'Дни'.
      lv_avail_estim_days = lv_e_tage.
    ELSE. "  для остальных ktart

      lv_avail_days = lv_diff2006_days - lv_reserved_days.

      IF lv_e_tage <= lv_avail_days.
        rs_leave_duration-abrtg = lv_e_tage.
        rs_leave_duration-time_unit_text = 'Дни'.
        lv_avail_estim_days = lv_e_tage.
      ELSE.
        rs_leave_duration-abrtg = 0.
        rs_leave_duration-time_unit_text = ''.
      ENDIF.
    ENDIF. "ktart


  ENDMETHOD.


  METHOD leaverequestcoll_delete_entity.
    DATA: lv_requestid TYPE /iwbep/s_mgw_name_value_pair-value,
          lo_exc_tech  TYPE REF TO /iwbep/cx_mgw_tech_exception. "scmg_case_guid.

    TRY.
        super->leaverequestcoll_delete_entity(
          EXPORTING
            iv_entity_name          = iv_entity_name
            iv_entity_set_name      = iv_entity_set_name
            iv_source_name          = iv_source_name
            it_key_tab              = it_key_tab
            io_tech_request_context = io_tech_request_context
            it_navigation_path      = it_navigation_path
            ).
        " очищаем таблицу ПЭП
        zcl_hr0043_utils=>read_param( EXPORTING it_param = it_key_tab
                                               iv_name =   CONV #( zcl_hr0043_utils=>mc_reqid )
                                    IMPORTING ev_value = lv_requestid
        ).
        DELETE FROM zthr_0043_sign WHERE guid = lv_requestid.
        IF sy-subrc NE 0.
          RAISE EXCEPTION lo_exc_tech.
        ENDIF.


      CATCH /iwbep/cx_mgw_busi_exception.
      CATCH /iwbep/cx_mgw_tech_exception.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.
CLASS zcl_hr0043_utils DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES ts_absencelimit TYPE zshr_0043_limit .
    TYPES:
      tt_absencelimit TYPE STANDARD TABLE OF ts_absencelimit .
    TYPES:
      tt_zshr_0043_pa2006 TYPE STANDARD TABLE OF zshr_0043_pa2006 .
    TYPES:
      tt_abwko TYPE STANDARD TABLE OF selopt .
    TYPES: tt_limit TYPE RANGE OF subty.

    CLASS-DATA mv_inft TYPE zz_inft READ-ONLY VALUE 2001 ##NO_TEXT.
    CLASS-DATA mv_sub TYPE char4 READ-ONLY VALUE 'P000' ##NO_TEXT.
    CLASS-DATA mv_sub2006 TYPE subty READ-ONLY VALUE 2006 ##NO_TEXT.
    CLASS-DATA mv_excs TYPE awart READ-ONLY VALUE 1000 ##NO_TEXT.
    CLASS-DATA mv_moabw TYPE moabw READ-ONLY VALUE 33 ##NO_TEXT.
    CLASS-DATA mv_mopgk TYPE mopgk READ-ONLY VALUE 'M' ##NO_TEXT.

    CLASS-DATA:
      mr_status TYPE RANGE OF cpf_parameter_value .
    CLASS-DATA mv_operation TYPE ptreq_attabsdata-operation READ-ONLY VALUE 'DEL' ##NO_TEXT.
    CLASS-DATA mv_abex TYPE subty READ-ONLY VALUE 1002 ##NO_TEXT.
    CLASS-DATA mv_abcn TYPE subty READ-ONLY VALUE 1001 ##NO_TEXT.
    CONSTANTS mc_action1 TYPE char40 VALUE 'ZCalculateQuotaAvailable' ##NO_TEXT.
    CONSTANTS mc_action2 TYPE char40 VALUE 'ZCalculateLeaveSpan' ##NO_TEXT.
    CONSTANTS mc_action3 TYPE char40 VALUE 'ZGetHire' ##NO_TEXT.
    CONSTANTS mc_action4 TYPE char40 VALUE 'checkAbsenceFromParam' ##NO_TEXT.
    CONSTANTS mc_action5 TYPE char40 VALUE 'checkCE' ##NO_TEXT.
    CONSTANTS mc_action6 TYPE char40 VALUE 'checkSud' ##NO_TEXT.
    CONSTANTS mc_action7 TYPE char40 VALUE 'checkFirstSign' ##NO_TEXT.
    CONSTANTS mc_action8 TYPE char40 VALUE 'setFirstXssSign' ##NO_TEXT.
    CONSTANTS mc_employp TYPE char10 VALUE 'EmployeeID' ##NO_TEXT.
    CONSTANTS mc_reqid TYPE char10 VALUE 'RequestID' ##NO_TEXT.
    CONSTANTS mc_subtyp TYPE char10 VALUE 'Subty' ##NO_TEXT.


    CLASS-METHODS generate_limit
      IMPORTING
        !iv_pernr          TYPE persno
        !iv_begda          TYPE begda OPTIONAL
        !iv_endda          TYPE endda OPTIONAL
        !iv_abstype        TYPE awart OPTIONAL
        !iv_rest_adv_days  TYPE ptm_quonum OPTIONAL
      RETURNING
        VALUE(rs_controls) TYPE zshr_0043_controls .

    CLASS-METHODS set_generation_flag1
      IMPORTING
        !is_leave_request TYPE cl_hcmfab_leave_reques_mpc=>ts_leaverequest
        !iv_ktart         TYPE ktart
        !iv_rest_adv_days TYPE ptm_quonum .
    CLASS-METHODS select_ktart
      IMPORTING
        !is_leave_request TYPE cl_hcmfab_leave_reques_mpc=>ts_leaverequest
      EXPORTING
        !ev_ktart         TYPE ktart
        !ev_last_data     TYPE endda .
    CLASS-METHODS get_abs_long_text
      IMPORTING
        !iv_absence TYPE awart
      EXPORTING
        !ev_text    TYPE zz_absn .
    CLASS-METHODS get_limit_long_text
      IMPORTING
        !iv_subty TYPE awart
      EXPORTING
        !ev_text  TYPE zz_absn .

    CLASS-METHODS check_crossplan
      IMPORTING
        !iv_pernr       TYPE persno
        !iv_begda       TYPE begda
        !iv_endda       TYPE endda
      RETURNING
        VALUE(rv_check) TYPE boolean_01 .
    CLASS-METHODS change_standard_message
      IMPORTING
        !is_changed_message         TYPE /iwbep/s_message_container
        !iv_entity_name             TYPE string
        !iv_new_id                  TYPE /iwbep/s_message_container-id
        !iv_new_number              TYPE /iwbep/s_message_container-number
      CHANGING
        VALUE(co_message_container) TYPE REF TO /iwbep/if_message_container .
    CLASS-METHODS check_disp
      IMPORTING
        !iv_subty      TYPE subty
      RETURNING
        VALUE(rv_bool) TYPE boolean_01 .
    CLASS-METHODS get_pa_text
      IMPORTING
        !iv_pa   TYPE zz_type
      EXPORTING
        !ev_text TYPE zz_absn .
    CLASS-METHODS parse_124message
      IMPORTING
        !ir_changed_msg              TYPE /iwbep/s_message_container
      EXPORTING
        VALUE(ev_conflicted_absence) TYPE zz_type
        VALUE(ev_pa)                 TYPE zz_type .
    CLASS-METHODS get_ce
      IMPORTING
        !iv_pernr          TYPE persno
      RETURNING
        VALUE(rs_controls) TYPE zshr_0043_controls .
    CLASS-METHODS get_ce_v2
      IMPORTING
        !iv_pernr       TYPE persno
      EXPORTING
        VALUE(ev_ce)    TYPE boole_d
        VALUE(ev_gence) TYPE boole_d .
    CLASS-METHODS check_sud
      IMPORTING
        !iv_pernr          TYPE persno
      RETURNING
        VALUE(rs_controls) TYPE zshr_0043_controls .
    CLASS-METHODS get_xss_sign
      IMPORTING
        !iv_pernr          TYPE persno
      RETURNING
        VALUE(rs_controls) TYPE zshr_0043_controls .
    CLASS-METHODS set_xss_sign
      IMPORTING
        !iv_pernr          TYPE persno
      RETURNING
        VALUE(rs_controls) TYPE zshr_0043_controls . "#EC CI_VALPAR  перенос комплексных значений
    CLASS-METHODS get_disp
      IMPORTING
        !iv_pernr      TYPE persno
        !iv_subty      TYPE awart
        !iv_begda      TYPE sy-datum OPTIONAL
      RETURNING
        VALUE(rv_bool) TYPE boolean_01
      RAISING
        RESUMABLE(/iwbep/cx_mgw_busi_exception)
        /iwbep/cx_mgw_tech_exception .
    CLASS-METHODS get_hire
      IMPORTING
        !iv_pernr          TYPE persno
      RETURNING
        VALUE(rs_controls) TYPE zshr_0043_controls .
    CLASS-METHODS get_inv
      IMPORTING
        !iv_pernr TYPE persno
        !iv_begda TYPE sy-datum
        !iv_endda TYPE sy-datum
      EXPORTING
        !ev_inv   TYPE boe_bool .
    CLASS-METHODS get_sud
      IMPORTING
        !iv_pernr TYPE persno
      EXPORTING
        !ev_sud   TYPE chang .

    CLASS-METHODS check_take_hidden_advance
      IMPORTING
        !iv_pernr         TYPE persno
        !iv_begda         TYPE sy-datum
        !iv_endda         TYPE sy-datum
        !iv_ktart         TYPE ktart OPTIONAL
      EXPORTING
        !ev_rest_adv_days TYPE ptm_quonum     " оставшиеся дни
      RETURNING
        VALUE(rv_result)  TYPE char1 .
    CLASS-METHODS check_future_limit_exists
      IMPORTING
        !iv_pernr        TYPE persno
        !iv_ktart        TYPE ktart
      EXPORTING
        !ev_sum_flag1    TYPE ptm_quonum
      RETURNING
        VALUE(rv_result) TYPE char1 .


    CLASS-METHODS get_diff_2006
      IMPORTING
        !iv_pernr         TYPE persno
        !iv_ktart         TYPE ktart OPTIONAL
      EXPORTING
        !ev_diff2006_days TYPE ptm_quonum .
    CLASS-METHODS get_p000_2001
      IMPORTING
        !iv_pernr       TYPE persno
        !iv_currentyear TYPE boole_d OPTIONAL
      EXPORTING
        !ev_p000_days   TYPE ptm_quonum .
    CLASS-METHODS read_param
      IMPORTING
        !iv_name  TYPE /iwbep/s_mgw_name_value_pair-name
        !it_param TYPE /iwbep/t_mgw_name_value_pair
      EXPORTING
        !ev_value TYPE /iwbep/s_mgw_name_value_pair-value .
    CLASS-METHODS get_ktart_by_abs
      IMPORTING
        !iv_abscode TYPE subty
      EXPORTING
        !ev_ktart   TYPE ktart .

    CLASS-METHODS set_memory_for_sumulate_lrq
      IMPORTING
        !iv_simulate TYPE boole_d.
    CLASS-METHODS get_memory_for_sumulate_lrq
      RETURNING
        VALUE(rv_simulate) TYPE boole_d.

    CLASS-METHODS set_memory_for_check
      IMPORTING
        !iv_simulate TYPE boole_d.
    CLASS-METHODS get_memory_for_check
      RETURNING
        VALUE(rv_simulate) TYPE boole_d.
    CLASS-METHODS set_lrq_deletable
      IMPORTING
        !iv_requestid  TYPE tim_req_id
        !it_req_detail TYPE hcmfab_t_lrq_request_detail
      EXPORTING
        !ev_deletable  TYPE boole_d.
    CLASS-METHODS set_lrq_editable
      IMPORTING
        !iv_requestid  TYPE tim_req_id
        !it_req_detail TYPE hcmfab_t_lrq_request_detail
      CHANGING
        !cv_editable   TYPE boole_d.
    CLASS-METHODS get_curr_balance
      IMPORTING
        !iv_pernr      TYPE persno
        !iv_subty      TYPE awart OPTIONAL
        !iv_begda      TYPE datum OPTIONAL
        !iv_endda      TYPE datum OPTIONAL
      EXPORTING
        !ev_quota_days TYPE ptm_quonum.
    CLASS-METHODS get_reserved_req
      IMPORTING
        !iv_pernr         TYPE persno
        !iv_subty         TYPE awart OPTIONAL
      EXPORTING
        !ev_reserved_days TYPE ptm_quonum.
    CLASS-METHODS get_wf_dates
      IMPORTING
        iv_wiid  TYPE sww_wiid
      EXPORTING
        ev_begda TYPE datum
        ev_endda TYPE datum.
    CLASS-METHODS get_days_from_dates
      IMPORTING
        iv_pernr       TYPE persno
        iv_begda       TYPE datum
        iv_endda       TYPE datum
      EXPORTING
        VALUE(ev_days) TYPE ptm_quonum.

  PROTECTED SECTION.
  PRIVATE SECTION.



ENDCLASS.



CLASS zcl_hr0043_utils IMPLEMENTATION.


  METHOD set_xss_sign.


    DATA: ls_zthr_xss_sign TYPE zthr_xss_sign.

    rs_controls-zz_info = abap_true.
    ls_zthr_xss_sign-pernr = iv_pernr.
    ls_zthr_xss_sign-usrid = sy-uname.
    ls_zthr_xss_sign-zz_date = sy-datum.
    ls_zthr_xss_sign-zz_time = sy-uzeit.

    INSERT zthr_xss_sign FROM ls_zthr_xss_sign.
    IF sy-subrc NE 0.
      rs_controls-zz_info = abap_false.
    ENDIF.

  ENDMETHOD.                "#EC CI_VALPAR перенос комплексных значений


  METHOD set_generation_flag1.
    TYPES: t_flag1 TYPE int1.
    DATA: ls_return TYPE bapireturn1.
    DATA: lt_p2006 TYPE TABLE OF p2006.

    "DATA(lv_hr0130_mv_flag) = CONV ptm_quonum( zcl_hr0130_param=>mv_flag ).

*    DATA(lt_p2006) = zcl_pa_it2006=>read_it2006(
*            iv_pernr  = is_leave_request-employee_number
*    ).

    CALL FUNCTION 'HR_READ_INFOTYPE'
      EXPORTING
        infty         = '2006'
        pernr         = is_leave_request-employee_number
        bypass_buffer = abap_true
      TABLES
        infty_tab     = lt_p2006.
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.

    CALL FUNCTION 'HR_EMPLOYEE_ENQUEUE'
      EXPORTING
        number = is_leave_request-employee_number.

    LOOP AT lt_p2006 ASSIGNING FIELD-SYMBOL(<ls_p2006>)
     WHERE subty = iv_ktart AND begda GE sy-datum.

      TRY.
          <ls_p2006>-flag1 =  CONV t_flag1( iv_rest_adv_days ). "#EC CI_CONV_OK flag1 имеет в стандарте тип c(1)
        CATCH cx_sy_conversion_error.
      ENDTRY.

      CALL FUNCTION 'HR_INFOTYPE_OPERATION'
        EXPORTING
          infty         = zcl_pa_infty=>mc_infty-i2006
          number        = <ls_p2006>-pernr
          subtype       = <ls_p2006>-subty
          objectid      = <ls_p2006>-objps
          lockindicator = <ls_p2006>-sprps
          validityend   = <ls_p2006>-endda
          validitybegin = <ls_p2006>-begda
          recordnumber  = <ls_p2006>-seqnr
          operation     = 'MOD'
          record        = <ls_p2006>
        IMPORTING
          return        = ls_return.

      IF ls_return IS INITIAL.
        COMMIT WORK.
      ENDIF.

    ENDLOOP.

    "unlock record after modification
    CALL FUNCTION 'HR_EMPLOYEE_DEQUEUE'
      EXPORTING
        number = is_leave_request-employee_number.

  ENDMETHOD.


  METHOD select_ktart.

    ev_ktart = '01'.
    ev_last_data = '00000000'.

    SELECT * FROM pa0077
    WHERE pernr = @is_leave_request-employee_number
          AND subty = '05'
          AND zzflag_emp_sign = 'X'
          AND begda <= @sy-datum AND endda >= @sy-datum
    INTO TABLE @DATA(lt_pa0077).

    IF line_exists( lt_pa0077[ 1 ] ).
      ev_ktart = '05'.
    ENDIF.

    "  получаем самую позднюю дату

    SELECT * FROM pa2006
    WHERE pernr = @is_leave_request-employee_number
          AND subty = @ev_ktart
    ORDER BY endda DESCENDING
    INTO TABLE @DATA(lt_pa2006).

    IF line_exists( lt_pa2006[ 1 ] ).
      ev_last_data = lt_pa2006[ 1 ]-endda + 1.
    ENDIF.

  ENDMETHOD.


  METHOD parse_124message.

    DATA: lv_msg1 TYPE /iwbep/s_message_container-message_v1.

    ev_conflicted_absence = ''.
    ev_pa = ''.


    " search IT
    lv_msg1 = ir_changed_msg-message_v1.
    REPLACE REGEX '.*\(IT(\d{4})/.*' IN lv_msg1 WITH '$1'.
    TRY.
        ev_pa = EXACT #( lv_msg1 ).
      CATCH cx_sy_conversion_error.
    ENDTRY.
    " search absence
    lv_msg1 = ir_changed_msg-message_v1.
    REPLACE REGEX '.+\(\u\u\d{4}/(\d{4}).*' IN lv_msg1 WITH '$1'.
    TRY.
        ev_conflicted_absence = EXACT #( lv_msg1 ).
      CATCH cx_sy_conversion_error.
    ENDTRY.



  ENDMETHOD.


  METHOD get_xss_sign.
    DATA: lt_pa0105 TYPE STANDARD TABLE OF pa0105.
    DATA: lt_zthr_xss_sign TYPE STANDARD TABLE OF zthr_xss_sign.

    rs_controls-zz_info = abap_false.

    SELECT * FROM pa0105
    WHERE pernr = @iv_pernr AND subty = '0001'
    INTO TABLE @lt_pa0105.

    IF line_exists( lt_pa0105[ 1 ] ).
      DATA(lv_usrid) =  lt_pa0105[ 1 ]-usrid.
      SELECT * FROM zthr_xss_sign WHERE usrid = @lv_usrid
      INTO TABLE @lt_zthr_xss_sign.
      IF NOT line_exists(  lt_zthr_xss_sign[ 1 ] ).
        rs_controls-zz_info = abap_true.
      ENDIF.
    ENDIF.


  ENDMETHOD.               "#EC CI_VALPAR  перенос комплексных значений


  METHOD get_sud.
    ev_sud = abap_false.

    SELECT * FROM pa0077 INTO TABLE @DATA(lt_pa0077)
             WHERE pernr = @iv_pernr AND subty = '05' AND
             begda <= @sy-datum AND endda >= @sy-datum AND
             zzflag_emp_sign EQ @abap_true.

    IF line_exists( lt_pa0077[ 1 ] ).
      ev_sud = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD get_pa_text.
    ev_text = ''.

    SELECT itext FROM t582s INTO TABLE @DATA(lt_text)
         WHERE sprsl EQ @sy-langu AND infty = @iv_pa.

    IF line_exists( lt_text[ 1 ] ).
      ev_text = lt_text[ 1 ]-itext.
    ENDIF.

  ENDMETHOD.


  METHOD get_limit_long_text.

    SELECT zz_limn FROM zthr_0043_typlim INTO TABLE @DATA(lt_text)
      WHERE langu EQ @sy-langu AND ktart EQ @iv_subty AND begda LE @sy-datum.

    IF line_exists( lt_text[ 1 ] ).
      ev_text = lt_text[ 1 ]-zz_limn.
    ENDIF.

  ENDMETHOD.


  METHOD get_inv.
    ev_inv = abap_false.

    SELECT * FROM pa0004 INTO TABLE @DATA(lt_pa0004)
             WHERE pernr = @iv_pernr  AND
             begda LE @iv_begda AND endda GE @iv_endda.

    IF line_exists( lt_pa0004[ 1 ] ).
      ev_inv = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD get_hire.
    DATA: lv_calc_date TYPE p0001-begda.
    " get MASSN
    DATA(lt_massn) = zcl_hr0043_param=>mr_massn.
    "get MONTHS
    DATA(lv_months) = zcl_hr0043_param=>mv_months.



    " get the last row
    SELECT * FROM pa0000
            WHERE pernr = @iv_pernr AND massn IN @lt_massn
            ORDER BY endda DESCENDING INTO TABLE @DATA(lt_pa0000) UP TO 1 ROWS.

    " check date
    IF line_exists( lt_pa0000[ 1 ] ).
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          date      = lt_pa0000[ 1 ]-begda
          days      = '00'
          months    = lv_months
*         SIGNUM    = '+'
          years     = '00'
        IMPORTING
          calc_date = lv_calc_date.

      lv_calc_date = lv_calc_date - 1.

      rs_controls-zz_hire = abap_false.
      IF  lv_calc_date GT sy-datum.
        rs_controls-zz_hire = abap_true.
      ENDIF.

    ENDIF.

  ENDMETHOD.               "#EC CI_VALPAR  перенос комплексных значений


  METHOD get_disp.

    DATA: lo_message_handler TYPE REF TO if_hrpa_message_handler.
    DATA: lv_age TYPE num2.
    DATA: lv_ok TYPE boole_d.
    DATA: lv_diff TYPE i.

    rv_bool = abap_false.

    " get the last disp
    SELECT * FROM pa2001
            WHERE pernr = @iv_pernr AND
      subty = @iv_subty
      ORDER BY begda DESCENDING
      INTO TABLE @DATA(lt_pa2001) UP TO 1 ROWS.

    " check result
    IF line_exists( lt_pa2001[ 1 ] ).
      " get age of employee
      DATA(lv_control_age) = zcl_hr0043_param=>mv_year.

      CALL FUNCTION 'HR_ECM_CALC_AGE'
        EXPORTING
          pernr           = iv_pernr
          keydt           = sy-datum
          datar           = lv_control_age
          message_handler = lo_message_handler
        IMPORTING
          age             = lv_age
          is_ok           = lv_ok.
      IF lv_ok NE abap_true.
        RETURN.
      ENDIF.

      " проверяем на наличие инвалиднoсти
      zcl_hr0043_utils=>get_inv(
            EXPORTING
              iv_pernr = iv_pernr
              iv_begda = lt_pa2001[ 1 ]-begda
              iv_endda = lt_pa2001[ 1 ]-endda
            IMPORTING
              ev_inv  = DATA(lv_inv)
       ).

      DATA(lv_per1) = zcl_hr0043_param=>mv_per1.
      DATA(lv_per3) = zcl_hr0043_param=>mv_per3.

      " age <= lv_control_age и инвалидности нет - раз в 3 года
      IF  lv_age <= lv_control_age AND lv_inv EQ abap_false.
        " get diff
        lv_diff = iv_begda - lt_pa2001[ 1 ]-begda.
        IF lv_diff < 0.
          lv_diff = lv_diff * -1.
        ENDIF.

        IF  lv_diff < lv_per3.
          rv_bool = abap_true.
        ENDIF.

        " age <= lv_control_age и инвалидность есть - раз в 12 год
      ELSEIF  lv_age <= lv_control_age AND lv_inv EQ abap_true.
        " get diff
        lv_diff = lt_pa2001[ 1 ]-begda - iv_begda.
        IF lv_diff < 0.
          lv_diff = lv_diff * -1.
        ENDIF.

        IF  lv_diff < lv_per1.
          rv_bool = abap_true.
        ENDIF.
        " если инвалидность есть И разница между lt_pa2001[ 1 ]-begda и lv_begda < 1 year
        " то выводим сообщение об ошибке
      ELSEIF  lv_age > lv_control_age. " age > lv_control_age

        lv_diff = lt_pa2001[ 1 ]-begda - iv_begda.
        IF lv_diff < 0.
          lv_diff = lv_diff * -1.
        ENDIF.
        IF  lv_diff  < lv_per1.
          rv_bool = abap_true.
        ENDIF.

      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD get_ce.
    DATA: lt_pa0031 TYPE STANDARD TABLE OF pa0031.

    rs_controls-zz_ce = abap_false.
    CALL FUNCTION 'HR_READ_0031_DB'
      EXPORTING
        pernr    = iv_pernr
      TABLES
        i0031_db = lt_pa0031.

    IF line_exists( lt_pa0031[ 1 ] ).
      IF  lt_pa0031[ 1 ]-rfp01 IS NOT INITIAL.
        rs_controls-zz_ce = abap_true.
      ENDIF.
    ENDIF.


  ENDMETHOD.               "#EC CI_VALPAR  перенос комплексных значений


  METHOD get_ce_v2.

    DATA: lt_p0001 TYPE STANDARD TABLE OF p0001.

    ev_ce = abap_false. " есть или нет совеститель
    ev_gence = abap_false. " остновной или совм

    CALL FUNCTION 'HR_READ_INFOTYPE'
      EXPORTING
        infty     = '0001'
        pernr     = iv_pernr
      TABLES
        infty_tab = lt_p0001.
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.

    " ---- get CE w/o 0031 it
    SELECT SINGLE sobid
         INTO @DATA(lv_sobid)
         FROM hrp1001
        WHERE objid = @iv_pernr
          AND otype = 'P'
          AND sclas = 'CP'           "#EC CI_NOORDER запись всегда одна
.
    SELECT sobid
      INTO TABLE @DATA(lt_sobid)
      FROM hrp1001
     WHERE objid = @lv_sobid
       AND otype = 'CP'
       AND sclas = 'P'.
    IF line_exists( lt_sobid[ 2 ] ).
      ev_ce = abap_true.
    ENDIF.

    LOOP AT lt_p0001 ASSIGNING FIELD-SYMBOL(<ls_p0001>)
     WHERE begda <= sy-datum AND endda >= sy-datum.
      IF <ls_p0001>-persg = 1.
        ev_gence = abap_true.
      ENDIF.
      IF <ls_p0001>-persg = 2.
        ev_gence = abap_false.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD check_sud.
    DATA: lv_sud TYPE zshr_0043_controls-zz_sud.

    zcl_hr0043_utils=>get_sud(
        EXPORTING iv_pernr = iv_pernr
        IMPORTING ev_sud = lv_sud
    ).

    rs_controls-zz_sud = lv_sud.
  ENDMETHOD.               "#EC CI_VALPAR  перенос комплексных значений


  METHOD get_abs_long_text.

    DATA(lv_inft) = zcl_hr0043_utils=>mv_inft.

    SELECT zz_absn FROM zthr_0043_typabs INTO TABLE @DATA(lt_text)
      WHERE langu EQ @sy-langu AND ktart EQ @iv_absence AND begda LE @sy-datum AND zz_inft = @lv_inft.

    IF line_exists( lt_text[ 1 ] ).
      ev_text = lt_text[ 1 ]-zz_absn.
    ENDIF.


  ENDMETHOD.


  METHOD generate_limit.
    DATA: ls_ui_leave_request  TYPE cl_hcmfab_leave_reques_mpc=>ts_leaverequest.
    rs_controls-zz_genlimit = abap_false.
    ls_ui_leave_request-employee_number = iv_pernr.
    ls_ui_leave_request-begda = iv_begda.
    ls_ui_leave_request-endda = iv_endda.
    ls_ui_leave_request-absence_type = iv_abstype.


    " выбираем 01 или 05 и определяем дату для расширения лимитов
    zcl_hr0043_utils=>select_ktart(
      EXPORTING
         is_leave_request = ls_ui_leave_request
      IMPORTING
         ev_ktart = DATA(lv_ktart)
         ev_last_data = DATA(lv_last_data)
    ).

    " вызвать программу hrutqta0 с использованием варианта
    " CUS&SUBMIT с параметрами селекционного экрана
    DATA(lv_variant_name) = CONV char12( 'CUS&SUBMIT'(001) ).

    cl_salv_bs_runtime_info=>set(
        display        = abap_false
        metadata       = abap_false
        data           = abap_true
    ).


    SUBMIT hrutqta0 USING SELECTION-SET lv_variant_name
          WITH pnppernr = ls_ui_leave_request-employee_number
          WITH pnpbegda  =  lv_last_data
          WITH se_ktart = lv_ktart
          AND RETURN.                  "#EC CI_SUBMIT бизнес-требования

    cl_salv_bs_runtime_info=>clear_all( ).

    " заменяем в созданной программой записи flag1
    zcl_hr0043_utils=>set_generation_flag1(
      EXPORTING
         is_leave_request = ls_ui_leave_request
         iv_ktart = lv_ktart
         iv_rest_adv_days = iv_rest_adv_days
    ).

  ENDMETHOD.          "#EC CI_VALPAR унифицированная выходная структура


  METHOD check_disp.
    rv_bool = abap_false.
    DATA(lv_attr) = zcl_hr0043_utils=>mv_sub2006.
    IF  iv_subty EQ lv_attr.
      rv_bool = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD check_crossplan.
    DATA(lv_plan) = zcl_hr0043_param=>mv_plan.

    rv_check = abap_false.

    SELECT * FROM pa2001
          WHERE pernr = @iv_pernr AND
          subty = @lv_plan AND sprps = 'X' AND
          ( begda <= @iv_endda AND endda >= @iv_begda ) " пересечение дат
          INTO TABLE @DATA(lt_pa2001).

    " check result
    IF line_exists( lt_pa2001[ 1 ] ).
      rv_check = abap_true.
    ENDIF.

  ENDMETHOD.


  METHOD change_standard_message.
    DATA: lt_messages TYPE bapirettab.
    DATA: lt_save_messages TYPE /iwbep/t_message_container.

    FREE lt_messages.

    lt_save_messages = co_message_container->get_messages( ). "#EC CI_CONV_OK использование стандарта

    co_message_container->reset( ). " save and remove all messages


    " change old messages from new
    LOOP AT lt_save_messages INTO DATA(ls_msg). "#EC CI_CONV_OK необходима вся предыдущаа структура
      IF  ls_msg-number = is_changed_message-number AND ls_msg-id = is_changed_message-id AND
        ls_msg-type = is_changed_message-type.

        lt_messages = VALUE #(
        type = is_changed_message-type
        id = iv_new_id
        number = iv_new_number
        message_v1 = is_changed_message-message_v1
        message_v2 = is_changed_message-message_v2
        message_v3 = is_changed_message-message_v3
        ( ) ).
      ELSE.
        "add original message
        lt_messages = VALUE #(
        type = ls_msg-type
        id = ls_msg-id
        number = ls_msg-number
        message_v1 = ls_msg-message_v1
        message_v2 = ls_msg-message_v2
        message_v3 = ls_msg-message_v3
        ( ) ).
      ENDIF.
      co_message_container->add_messages_from_bapi(
                      it_bapi_messages         = lt_messages
                      iv_determine_leading_msg = /iwbep/if_message_container=>gcs_leading_msg_search_option-last
                      iv_add_to_response_header = abap_true
                      iv_entity_type           = iv_entity_name
      ).
    ENDLOOP.
  ENDMETHOD.


  METHOD check_take_hidden_advance.

    DATA: lt_p2006 TYPE STANDARD TABLE OF p2006.
    DATA: lv_e_tage TYPE  ptm_quonum.
    DATA: lv_sum_flag1 TYPE ptm_quonum VALUE 0.
    DATA: lv_diff2006 TYPE ptm_quonum VALUE 0.
    DATA: lv_p000_days TYPE ptm_quonum VALUE 0.
    DATA: lv_avail_days TYPE ptm_quonum VALUE 0.
    DATA(lv_flag7) = zcl_hr0130_param=>mv_flag. " 7 days

    rv_result = ''.
    ev_rest_adv_days = 0.

    " определяем етаг
    CALL FUNCTION 'DAYS_BETWEEN_TWO_DATES'
      EXPORTING
        i_datum_bis             = iv_endda
        i_datum_von             = iv_begda
        i_kz_incl_bis           = '1'
      IMPORTING
        e_tage                  = lv_e_tage
      EXCEPTIONS
        days_method_not_defined = 1
        OTHERS                  = 2.
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.
    IF  lv_e_tage < 0.
      lv_e_tage = lv_e_tage * -1.
    ENDIF.

    CALL FUNCTION 'HR_READ_INFOTYPE'
      EXPORTING
        infty     = '2006'
        pernr     = iv_pernr
      TABLES
        infty_tab = lt_p2006.
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.
    " определяем есть ли лимиты будущих периодов
    DATA(lv_is_limits) = zcl_hr0043_utils=>check_future_limit_exists(
        EXPORTING
        iv_pernr = iv_pernr
        iv_ktart = iv_ktart
        IMPORTING
        ev_sum_flag1 = lv_sum_flag1
    ).

    IF lv_is_limits EQ abap_false. " лимитов будущих периодов нет

      " рассчитываем данные для запуска расширения лимита: так как его еще нет
      " сумма diff из 2006
      zcl_hr0043_utils=>get_diff_2006(
          EXPORTING iv_pernr = iv_pernr
                     iv_ktart = '01'
          IMPORTING ev_diff2006_days  = lv_diff2006
      ).
      "  сумма Р000 из 2001
      zcl_hr0043_utils=>get_p000_2001(
          EXPORTING iv_pernr = iv_pernr
          IMPORTING ev_p000_days  = lv_p000_days
      ).

      lv_avail_days = lv_diff2006 - lv_p000_days.

      IF  lv_e_tage > lv_avail_days AND
        lv_e_tage <= ( lv_avail_days + lv_flag7 ). "не превышает доступный

        rv_result = 'G'.
        ev_rest_adv_days = lv_flag7 + lv_avail_days - lv_e_tage. " оcтаток флаг1

      ELSEIF lv_e_tage > ( lv_avail_days + lv_flag7 ). " "#EC CI_CONV_OK превышает даже скрытый аванс
        rv_result = 'E'.
      ENDIF.

    ELSEIF  lv_e_tage <= lv_sum_flag1.
      " лимиты будущих периодов есть и они больше дней в заявке

      rv_result = 'A'.
      ev_rest_adv_days =  lv_sum_flag1 - lv_e_tage. " остаток флаг1

    ELSE.
      rv_result = 'E'.

    ENDIF.

  ENDMETHOD.


  METHOD check_future_limit_exists.
    TYPES: tt_p2006 TYPE STANDARD TABLE OF p2006 WITH KEY ktart.
    DATA: lt_p2006 TYPE tt_p2006.
    DATA: lv_future_year TYPE num4.


    rv_result = abap_false.
    ev_sum_flag1 = 0.
    lv_future_year = sy-datum+0(4) + 2.

    CALL FUNCTION 'HR_READ_INFOTYPE'
      EXPORTING
        infty     = '2006'
        pernr     = iv_pernr
      TABLES
        infty_tab = lt_p2006.
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.

    LOOP AT lt_p2006 ASSIGNING FIELD-SYMBOL(<ls_p2006>) WHERE subty = iv_ktart AND endda+0(4) = lv_future_year.
      ev_sum_flag1 = ev_sum_flag1 + <ls_p2006>-flag1.
      rv_result = abap_true.
    ENDLOOP.

  ENDMETHOD.


  METHOD get_diff_2006.
    DATA: lt_p2006 TYPE STANDARD TABLE OF p2006.
    DATA: lt_p2006_filter TYPE STANDARD TABLE OF p2006 WITH NON-UNIQUE KEY ktart.
    DATA: lt_ktart TYPE RANGE OF ktart.

    ev_diff2006_days = 0.

    lt_p2006 = zcl_pa_it2006=>read_it2006(
            iv_pernr  = iv_pernr
   ).
    lt_p2006_filter = lt_p2006.

    " определяем ktart
    IF iv_ktart EQ '01'.
      lt_ktart = zcl_hr0043_param=>mr_ktart.
    ELSE.
      APPEND VALUE #( sign = 'I' option = 'EQ' low = iv_ktart ) TO lt_ktart.
    ENDIF.

    "-------  из 2006 получаем diff дни
    LOOP AT lt_p2006_filter ASSIGNING FIELD-SYMBOL(<ls_p2006_filter>)
        WHERE ktart IN lt_ktart.
      IF   <ls_p2006_filter>-anzhl <>  <ls_p2006_filter>-kverb.
        ev_diff2006_days = ev_diff2006_days + <ls_p2006_filter>-anzhl - <ls_p2006_filter>-kverb.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD  get_p000_2001.

    TYPES: BEGIN OF t_p2001,
             rem TYPE char1.
             INCLUDE TYPE p2001.
    TYPES:  END OF  t_p2001.

    DATA: lt_p2001 TYPE STANDARD TABLE OF p2001.
    DATA: lt_p2001_filter TYPE SORTED TABLE OF t_p2001 WITH NON-UNIQUE KEY subty begda endda.
    DATA: lt_p2001_plan TYPE TABLE OF t_p2001 WITH NON-UNIQUE KEY pernr.
    DATA: lt_pdpnr TYPE TABLE OF pdpnr.
    DATA: lv_where_plan TYPE string.
    DATA: lv_curr_year TYPE n LENGTH 4.
    DATA: lv_next_year TYPE n LENGTH 4.

    ev_p000_days  = 0.

    lt_p2001 = zcl_pa_it2001=>read_it2001(
        iv_pernr  = iv_pernr
    ).
    " data moved to sorted table
    MOVE-CORRESPONDING lt_p2001 TO lt_p2001_filter.

    " ---- удаляем Р000 с совпадающими датами с другими отсутствиями (2001)
    lt_p2001_plan = FILTER #( lt_p2001_filter WHERE subty = 'P000' ).
    " выбираем строки с такими же датами как у Р000
    LOOP AT lt_p2001_plan ASSIGNING FIELD-SYMBOL(<ls_p2001_plan>).
      "ищем Р000 с дублирующими датами
      DATA(lt_p2001_find) =  FILTER #( lt_p2001_filter WHERE subty NE 'P000'
       AND begda = <ls_p2001_plan>-begda AND endda = <ls_p2001_plan>-endda ).
      IF line_exists( lt_p2001_find[ 1 ] ).
        <ls_p2001_plan>-rem = 'X'. "
      ENDIF.
    ENDLOOP.

    DELETE lt_p2001_plan WHERE rem = 'X'.

    "----- новый алгоритм расчета плановых дней
    lt_pdpnr = VALUE #( ( pernr = iv_pernr error = abap_false ) ).

    " --- в зависимости от параметра делаем выборку плана
    IF iv_currentyear EQ abap_false.
      lv_where_plan = | begda >= sy-datum|.
    ELSE.
      lv_curr_year = sy-datum+0(4).
      lv_next_year = lv_curr_year + 1.
      lv_where_plan = | begda >= sy-datum and begda+0(4) = { lv_curr_year } and | &&
      | ( endda+0(4) = { lv_curr_year } or endda+0(4) = { lv_next_year } )|.
    ENDIF.

    LOOP AT lt_p2001_plan ASSIGNING <ls_p2001_plan> WHERE (lv_where_plan).

      " получаем дни из дат
      zcl_hr0043_utils=>get_days_from_dates(
          EXPORTING iv_pernr = iv_pernr
          iv_begda = <ls_p2001_plan>-begda
          iv_endda = <ls_p2001_plan>-endda
          IMPORTING ev_days =  ev_p000_days ).
    ENDLOOP.


  ENDMETHOD.


  METHOD read_param.
    READ TABLE it_param INTO DATA(ls_key)
                   WITH KEY name = iv_name.
    IF sy-subrc EQ 0.
      ev_value = ls_key-value.
    ENDIF.
  ENDMETHOD.


  METHOD get_ktart_by_abs.
    CASE iv_abscode.
      WHEN '1000'.
        ev_ktart = '01'. "02,03,04
      WHEN '1001'.
        ev_ktart = '05'.
      WHEN '1002'.
        ev_ktart = '07'.
    ENDCASE.
  ENDMETHOD.


  METHOD set_memory_for_sumulate_lrq.

    EXPORT lv_sim FROM iv_simulate
    TO MEMORY ID zcl_hr0043_leavereq_cr_dpc_ext=>mc_memory_simulate_id.
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.

  ENDMETHOD.


  METHOD get_memory_for_sumulate_lrq.

    IMPORT lv_sim TO rv_simulate
    FROM MEMORY ID zcl_hr0043_leavereq_cr_dpc_ext=>mc_memory_simulate_id.
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.

    FREE MEMORY ID zcl_hr0043_leavereq_cr_dpc_ext=>mc_memory_simulate_id.

  ENDMETHOD.


  METHOD set_memory_for_check.

    EXPORT lf_no_check FROM iv_simulate
          TO MEMORY ID zcl_hr0043_leavereq_cr_dpc_ext=>mc_memory_id.
  ENDMETHOD.


  METHOD get_memory_for_check.
    DATA(lv_no_check) = space.

    IMPORT lv_no_check TO rv_simulate
    FROM MEMORY ID zcl_hr0043_leavereq_cr_dpc_ext=>mc_memory_id.
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.

    FREE MEMORY ID zcl_hr0043_leavereq_cr_dpc_ext=>mc_memory_id.
  ENDMETHOD.


  METHOD set_lrq_deletable.
    DATA: lt_leave_req_detail TYPE SORTED TABLE OF hcmfab_s_lrq_request_detail
          WITH NON-UNIQUE KEY request_id.
    DATA: ls_leave_req_detail TYPE  hcmfab_s_lrq_request_detail.

    ev_deletable = abap_false.
    "CA_PT_REQ_HEADER->READ_FROM_PTREQ_HEADER
    lt_leave_req_detail = it_req_detail.

    ls_leave_req_detail = lt_leave_req_detail[ request_id = iv_requestid  ].
    IF sy-subrc EQ 0 AND ls_leave_req_detail-status = 'SENT'.
      ev_deletable = abap_true.
    ENDIF.

  ENDMETHOD.


  METHOD set_lrq_editable.
    DATA: lt_leave_req_detail TYPE SORTED TABLE OF hcmfab_s_lrq_request_detail
          WITH NON-UNIQUE KEY request_id.
    DATA: ls_leave_req_detail TYPE  hcmfab_s_lrq_request_detail.

    lt_leave_req_detail = it_req_detail.

    ls_leave_req_detail = lt_leave_req_detail[ request_id = iv_requestid  ].
    IF sy-subrc EQ 0 AND ( ls_leave_req_detail-status = 'REJECTED' OR
        ls_leave_req_detail-status = 'SENT' ).
      cv_editable = abap_false.
    ENDIF.

  ENDMETHOD.


  METHOD get_curr_balance.

    DATA: lv_diff2006_days TYPE ptm_quonum VALUE 0.
    DATA: lv_p000_days TYPE ptm_quonum VALUE 0.
    DATA: lv_avail_days TYPE ptm_quonum VALUE 0.
    DATA: lv_ktart TYPE ktart.
    DATA: lv_sum_flag1 TYPE ptm_quonum VALUE 0.
    DATA: lv_req_days TYPE ptm_quonum VALUE 0,
          lv_reserved_days TYPE ptm_quonum VALUE 0.

    ev_quota_days = 0.

    " get ktart for 01/05/07
    zcl_hr0043_utils=>get_ktart_by_abs(
        EXPORTING iv_abscode = iv_subty
        IMPORTING ev_ktart = lv_ktart
    ).

    " сумма diff из 2006
    zcl_hr0043_utils=>get_diff_2006(
        EXPORTING iv_pernr = iv_pernr
                  iv_ktart = lv_ktart
        IMPORTING ev_diff2006_days  = lv_diff2006_days
    ).

    IF lv_ktart EQ '01'.
      "  сумма Р000 из 2001
      zcl_hr0043_utils=>get_p000_2001(
          EXPORTING iv_pernr = iv_pernr
          IMPORTING ev_p000_days  = lv_p000_days
      ).
      lv_avail_days = lv_diff2006_days - lv_p000_days.

      " определяем есть ли лимиты будущих периодов
      DATA(lv_is_limits) = zcl_hr0043_utils=>check_future_limit_exists(
          EXPORTING
              iv_pernr = iv_pernr
              iv_ktart = '01'
          IMPORTING
              ev_sum_flag1 = lv_sum_flag1
      ).
      " если есть ЛБП выводим флаг1
      IF lv_is_limits EQ abap_true.
        lv_avail_days = lv_sum_flag1.
      ENDIF.
    ELSE.
      lv_avail_days = lv_diff2006_days.
    ENDIF. " ktart = 01

    " получаем дни из дат
    zcl_hr0043_utils=>get_days_from_dates(
        EXPORTING iv_pernr = iv_pernr
        iv_begda = iv_begda
        iv_endda = iv_endda
        IMPORTING ev_days = lv_req_days
     ).

    " получаем зарезервированные дни
     zcl_hr0043_utils=>get_reserved_req(
         EXPORTING iv_pernr = iv_pernr
         iv_subty =  iv_subty
         IMPORTING ev_reserved_days  =  lv_reserved_days
     ).



    ev_quota_days = lv_avail_days - lv_req_days - lv_reserved_days.

  ENDMETHOD.


  METHOD get_reserved_req.
    DATA: lt_workitem TYPE TABLE OF sww_wiid.
    DATA: ls_wihdr TYPE  swr_wihdr.
    DATA: lv_ret TYPE sy-subrc.
    DATA: lv_begda TYPE datum.
    DATA: lv_endda TYPE datum.
    DATA: lv_reserved_days TYPE ptm_quonum VALUE 0.

    ev_reserved_days = 0.

    " --- get array of request_id
    SELECT a~item_id, a~operation, a~abwtg, hextobin( a~item_id ) AS  item_id16,
          i~item_list_id AS item_item_list_id, i~item_ins AS item_item_ins,
          h~request_id, h~item_list_id AS req_item_list_id, h~status, h~workitem_id
          FROM
            ptreq_attabsdata AS a JOIN ptreq_items AS i ON i~item_ins = hextobin( a~item_id )
          JOIN
            ptreq_header AS h ON h~item_list_id = i~item_list_id
          WHERE
            a~pernr = @iv_pernr AND
            a~subty =  @iv_subty
          ORDER BY h~request_id
          INTO TABLE @DATA(lt_ptreq_header).

    IF line_exists( lt_ptreq_header[ 1 ] ).
      LOOP AT lt_ptreq_header ASSIGNING FIELD-SYMBOL(<lv_wid>).
        APPEND INITIAL LINE TO lt_workitem ASSIGNING FIELD-SYMBOL(<lv_val>).
        <lv_val> = <lv_wid>-workitem_id.
      ENDLOOP.
    ENDIF.

    SORT lt_workitem.
    DELETE ADJACENT DUPLICATES FROM lt_workitem.

    LOOP AT lt_workitem ASSIGNING <lv_val>.
      " проверяем что заявка не COMPLETED
      CALL FUNCTION 'SAP_WAPI_GET_HEADER'
        EXPORTING
          workitem_id         = <lv_val>
        IMPORTING
          workitem_attributes = ls_wihdr
          return_code         = lv_ret.

      " читаем контейнер потока
      IF ls_wihdr-wi_stat NE 'COMPLETED'.
        " получаем даты из контейнера потока
        zcl_hr0043_utils=>get_wf_dates(
            EXPORTING iv_wiid = <lv_val>
            IMPORTING ev_begda = lv_begda ev_endda = lv_endda ).
        " получаем дни из дат
        zcl_hr0043_utils=>get_days_from_dates(
            EXPORTING iv_pernr = iv_pernr
            iv_begda = lv_begda
            iv_endda = lv_endda
            IMPORTING ev_days = lv_reserved_days ).

        ev_reserved_days = ev_reserved_days + lv_reserved_days.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD get_wf_dates.
    DATA: lo_iterator_handle      TYPE REF  TO if_swf_cnt_iterator.
    DATA: lo_element_handle TYPE REF  TO if_swf_cnt_element,
          lo_cx_exception   TYPE REF TO cx_swf_ifs_exception,
          lv_element_name   TYPE swfdname,
          lo_value_ref      TYPE REF TO data.
    FIELD-SYMBOLS: <ls_struct> TYPE zshr_data_pernr.

    TRY.
        DATA(lo_cont) = cl_swf_run_wim_factory=>find_by_wiid( im_wiid = iv_wiid )->get_wi_container( ).

        lo_cont->get_iterator(
            IMPORTING
              ex_iterator             = lo_iterator_handle
              ex_element              = lo_element_handle ).

        WHILE NOT lo_element_handle IS INITIAL.

          TRY.
              CALL METHOD lo_element_handle->get_name
                IMPORTING
                  name = lv_element_name.

              IF  lv_element_name EQ 'GS_DATA_PERNR'.
                lo_element_handle->get_value_ref(
                  IMPORTING value_ref = lo_value_ref
                ).
                ASSIGN lo_value_ref->* TO <ls_struct>.
                ev_begda = <ls_struct>-begda.
                ev_endda = <ls_struct>-endda.
                CLEAR lo_element_handle.
              ENDIF.

            CATCH cx_swf_ifs_exception INTO lo_cx_exception.

          ENDTRY.

          CLEAR lo_element_handle.
*   get reference of next element
          CALL METHOD lo_iterator_handle->get_next
            RECEIVING
              element = lo_element_handle.
        ENDWHILE.

      CATCH cx_swf_run_wim_enq_failed cx_swf_run_wim_read_failed cx_swf_run_wim INTO DATA(lx_swf_run).
        RETURN.
    ENDTRY.
  ENDMETHOD.


  METHOD get_days_from_dates.

    DATA: lt_pdpnr TYPE TABLE OF pdpnr.
    DATA: lt_pdpsp TYPE  TABLE OF pdpsp.
    DATA: lt_pdpsp_sort TYPE SORTED TABLE OF pdpsp WITH NON-UNIQUE KEY ftkla.
    DATA: lt_pdsppsp TYPE TABLE OF pdsppsp.

    ev_days = 0.

    " ---- получаем только рабочие дни из заявки
    lt_pdpnr = VALUE #( ( pernr = iv_pernr error = abap_false ) ).
    CALL FUNCTION 'HR_PERSON_READ_WORK_SCHEDULE'
      EXPORTING
        begin_date         = iv_begda
        end_date           = iv_endda
      TABLES
        pernr_tab          = lt_pdpnr
        psp                = lt_pdpsp
        day_psp            = lt_pdsppsp
      EXCEPTIONS
        error_in_build_psp = 1
        OTHERS             = 2.
    IF sy-subrc EQ 0.
      lt_pdpsp_sort = lt_pdpsp.
      ev_days = ev_days + REDUCE #( INIT lv_sum TYPE zz_plan
                                     FOR ls_pdpsp_sort IN
                                     FILTER #( lt_pdpsp_sort
                                               WHERE ftkla EQ '0' )
                                     NEXT lv_sum = lv_sum + 1 ).

    ENDIF.
  ENDMETHOD.

ENDCLASS.